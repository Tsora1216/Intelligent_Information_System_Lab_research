# -*- coding: utf-8 -*-
"""【公開用】02章_コピペで簡単実行！キテレツおもしろ自然言語処理_付録コード.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AnXkZ2JRl3IIP92zwOWkdHQJIGYGqe0X
"""



"""ここに掲載されているコードは、  
『コピペで簡単実行！キテレツおもしろ自然言語処理～PythonとColaboratoryで身につく基礎の基礎』書籍の付録です。    
本ファイルの公開用URLや、本ファイル内のコードを、みだりに他の人へ共有しないでください。  

本ファイルは、書籍に記載のコードのコピペの手間を省くために作られました。  
本ファイルの公開用URLにアクセスすると、  
お手元のGoogleアカウントに本ファイルのコピーが作成されます。  
（つまり、コレをご覧になっているということは、コピーをご覧になっています）    
そのコピーは、あなただけのファイルとして生成されるため、    
書籍をお買い求め済みの方は、自由に変更したり実行したり保存したりして問題ありません。   

初期状態では、ご参考までに筆者が実行した出力結果を残してあります。  
ご自身で実行する際には、「編集」⇒「出力を全て消去」により、  
出力結果を消去してから実行なさると良いでしょう。  

※注：Googleの公式が作成したファイルではないため、実行時に  
「警告: このノートブックは Google が作成したものではありません。」  
という警告が出ます。  
気になる方は、ご自身の環境に都度コードをコピーして実行しても良いでしょう。



"""



"""■ Janomeのインストール："""

!pip install janome
# !pip install janome==0.4.1

"""■ 原始的な形態素解析の第一歩："""

# Janomeのロード
from janome.tokenizer import Tokenizer

# Tokenizerインスタンスの生成 
tokenizer = Tokenizer()

# 形態素解析の実施
tokens = tokenizer.tokenize("肉を食べよう！")

# 解析結果の出力：複数の結果が入っておりループ処理で順番に出す
for token in tokens:
  print(token) # 各単語の全情報

"""■ Janomeの使い方確認："""

# Janomeのロード
from janome.tokenizer import Tokenizer

# Tokenizerインスタンスの生成 
tokenizer = Tokenizer()

# 形態素解析の実施
tokens = tokenizer.tokenize("肉を食べよう！")

# 解析結果の出力
for token in tokens:
  print(token) # 各単語の全情報
  # print(token.surface) #元の単語そのまま ⇒ 出力を省略
  print(token.reading) # ヨミガナ
  print(token.base_form) # (動詞などの)原形
  print(token.part_of_speech) # 品詞情報
  print(token.part_of_speech.split(','))  # 品詞情報をカンマで区切り、リスト形式に加工
  print(token.part_of_speech.split(',')[0]) # [0]でリストの先頭の要素を参照
  print("-----") # わかりやすいように単語ごとに仕切りを入れる

"""■ ゲンシゴツール："""

# Janomeのロード
from janome.tokenizer import Tokenizer

# Tokenizerインスタンスの生成 
tokenizer = Tokenizer()

# 形態素解析の実施
tokens = tokenizer.tokenize("これでみんなで原始人。肉を食べよう！")

# tokenが助詞の場合は空文字列、それ以外はヨミガナを返す関数の定義
def token2gensigo(input_token):
  if input_token.part_of_speech.split(',')[0] == "助詞":
    return ""
  else:
    return input_token.reading

# 各tokenの変換結果を" "（半角スペース) でつなげる
result_str = ""
# 全てのtokenに、上でdef( 定義) したtoken2gensigo 関数を実行
for token in tokens:
  result_str += token2gensigo(token) + " "

print(result_str)

"""■ ゲンシジンがいっぱい襲来してきたときのためのコード："""

# Janomeのロード
from janome.tokenizer import Tokenizer

# Tokenizerインスタンスの生成 
tokenizer = Tokenizer()

# 日本語をゲンシゴにする関数
def nihongo2gensigo(input_str):
  # 形態素解析の実施
  tokens = tokenizer.tokenize(input_str)
  # 各token の変換結果を" "（半角スペース) でつなげる
  result_str = ""
  for token in tokens:
    result_str += token2gensigo(token) + " "
  return result_str

# tokenが助詞の場合は空文字列、それ以外はヨミガナを返す関数
def token2gensigo(input_token):
  if input_token.part_of_speech.split(',')[0] == "助詞":
    return ""
  else:
    return input_token.reading

print(nihongo2gensigo("これで今日からみんな原始人になる"))
print(nihongo2gensigo("人民の人民による人民のための政治"))
print(nihongo2gensigo("大いなる力には大いなる責任が伴う"))

"""■ 1回実行後、以降はこれだけで済む："""

print(nihongo2gensigo("これで何回でも原始人になれる！"))

"""■ ひらがなをカタカナに直す関数："""

# ひらがなをカタカナに直す関数
def hira_to_kata(input_str):
    return "".join([chr(ord(ch) + 96) if ("ぁ" <= ch <= "ん") else ch for ch in input_str])

print(hira_to_kata("ここに入れた文章のひらがなをカタカナに変えるよ"))

"""■ 魏延降臨："""

# Janomeのロード
from janome.tokenizer import Tokenizer

# Tokenizerインスタンスの生成 
tokenizer = Tokenizer()

#日本語を魏延語にする関数
def nihongo2giengo(input_str):
  # 形態素解析の実施
  tokens = tokenizer.tokenize(input_str)
  # 各tokenを魏延語変換器にかける
  result_str = ""
  for token in tokens:
    result_str += token2giengo(token) + " "
  return result_str

# ひらがなをカタカナに直す関数
def hira_to_kata(input_str):
    return "".join([chr(ord(ch) + 96) if ("ぁ" <= ch <= "ん") else ch for ch in input_str])

# tokenが助詞の場合は空文字列、それ以外は
# 元の単語のひらがなをカタカナにする関数
def token2giengo(input_token):
  if input_token.part_of_speech.split(',')[0] == "助詞":
    return ""
  else:
    # 「ひらがな」を「カタカナ」に変える関数を元の単語に適用
    return hira_to_kata(input_token.surface)

print(nihongo2giengo("これで今日からみんな原始人になる"))
print(nihongo2giengo("人民の人民による人民のための政治"))
print(nihongo2giengo("大いなる力には大いなる責任が伴う"))

"""■ 戦闘民族の血をインストール：  
※実行後、要「RESTART RUNTIME」

"""

!pip install janome==0.3.7
!pip install pykakasi==0.94
!pip install semidbm==0.5.1
!pip install six==1.12.0
!pip install gokulang==1.0.2

"""■ 戦闘民族の誇りにかけて実行してみる："""

from gokulang.gokulang import GokuLang
g = GokuLang()
print(g.translate('案外簡単に戦闘民族になれてすごいぞ'))
print(g.translate('汚い花火だ'))
print(g.translate('パイソンに慣れたか？今のお前なら大丈夫だ'))

"""■ お嬢様コトバに変換して差し上げますわ（超簡易版）："""

# 変換用の辞書定義
ojyou_dict = {
    "こんにちは" : "ごきげんよう",
    "すみません": "恐れ入ります",
    "ああそう" : "さようでございますか",
    "おなら" : "天使のため息",
    "ぶっとばすぞ" : "快適な空の旅をお楽しみください",
}

# 変換用の辞書に応じた変換処理を行う関数
def ippansimin2ojyou(input_str):
  result_str = input_str
  for key,value in ojyou_dict.items():
    result_str = result_str.replace(key, value)
  return result_str

print(ippansimin2ojyou("こんにちは、調子はどう？"))
print(ippansimin2ojyou("すみません、おならが出そうです"))
print(ippansimin2ojyou("ああそう、ぶっとばすぞ"))

